clusterDetailsQuery=select a.resourceid, a.resourcename, a.resourcetypeid, a.createdate from resource a, resource_dependency_map b where a.ResourceId = b.ResourceId and b.DependencyType = 'ROOT'
portfolioDetailsQuery=select a.resourceid, a.resourcename, a.resourcetypeid, a.createdate from resource a, resource_dependency_map b where a.ResourceId = b.ResourceId and b.DependencyType = 'PORTFOLIO' and a.resourceid in (select resourceid from resource_dependency_map where dependencyresourceid=?);
serverStateNew=select portfolioid,critical,warning,healthy,dbservercriticalcount,dbserverwarncount,servercriticalcount,serverwarncount,othercriticalcount,otherwarncount from (select t.portfolioid,sum(t.critical_status) as critical, sum(t.warning_status) as warning, sum(t.healthy_status) as healthy, sum(t.dbservercriticalcount) as dbservercriticalcount, sum(t.dbserverwarncount) as dbserverwarncount, sum(t.servercriticalcount) as servercriticalcount, sum(t.serverwarncount) as serverwarncount, sum(t.othercriticalcount) as othercriticalcount, sum(t.otherwarncount) as otherwarncount from (select qd.clusterid , qd.portfolioid , qd.resourceid, qd.observableid, qd.value , qd.observationtime ,row_number() OVER (partition by qd.resourceid ORDER BY qd.critical_status desc, qd.warning_status desc ,qd.healthy_status  desc) as rowrank, qd.critical_status ,qd.warning_status ,qd.healthy_status 	,qd.dbservercriticalcount, qd.dbserverwarncount , qd.servercriticalcount ,qd.serverwarncount , qd.othercriticalcount ,qd.otherwarncount from ( SELECT rdm2.dependencyresourceid AS clusterid, intermediate.portfolioid, intermediate.resourceid, intermediate.observableid, intermediate.value, intermediate.observationtime, intermediate.rowrank, intermediate.critical_status, intermediate.warning_status, intermediate.healthy_status, intermediate.dbservercriticalcount, intermediate.dbserverwarncount, intermediate.servercriticalcount, intermediate.serverwarncount, intermediate.othercriticalcount, intermediate.otherwarncount FROM ( SELECT 	obs.portfolioid, obs.resourceid, obs.observableid, obs.value, obs.observationtime, row_number() OVER (partition by obs.resourceid, obs.observableid ORDER BY obs.observationtime desc) as rowrank, MAX(CASE WHEN obs.state = 'Critical' THEN 1 ELSE 0 END) AS critical_status, MAX(CASE WHEN obs.state = 'Warning' THEN 1 ELSE 0 END) AS warning_status, MAX(CASE WHEN obs.state = 'Healthy' THEN 1 ELSE 0 END) AS healthy_status, MAX(CASE WHEN obs.state = 'Critical' and res.type='DBServer' then 1 else 0 end) as dbservercriticalcount, MAX(CASE WHEN obs.state = 'Warning' and res.type='DBServer' then 1 else 0 end) as dbserverwarncount, MAX(CASE WHEN obs.state = 'Critical' and res.type='Server' then 1 else 0 end) as servercriticalcount, MAX(CASE WHEN obs.state = 'Warning' and res.type='Server' then 1 else 0 end) as serverwarncount, MAX(CASE WHEN obs.state = 'Critical' and res.type<>'Server' and res.type<>'DBServer' then 1 else 0 end) as othercriticalcount, MAX(CASE WHEN obs.state = 'Warning' and res.type<>'Server' and res.type<>'DBServer' then 1 else 0 end) as otherwarncount FROM observations obs INNER JOIN resourcetype res ON res.resourcetypeid = obs.resourcetypeid group by obs.portfolioid,obs.resourceid ,obs.observableid, obs.value, obs.observationtime ) intermediate INNER JOIN resource_dependency_map rdm2 ON intermediate.portfolioid = rdm2.resourceid WHERE rdm2.dependencytype = 'PORTFOLIO' ) qd where qd.rowrank = 1 ) t where t.portfolioid=? and t.rowrank = 1 group by t.portfolioid) as fin;
clusterChildQuery=select portfolioid,count(a.resourceid) as componentcount from resource_dependency_map a,resource b where a.ResourceId = b.ResourceId and b.IsActive = 1 and  a.portfolioid in ( select resourceid from resource_dependency_map where dependencyresourceid in (select resourceid from resource where resourcename=?)) group by portfolioid;
resourceNameQuery=select resourcename from resource where resourceid=?;
portfolioIdQuery=select resourceid from resource where resourcename=?;
innerPortfolioQuery=select resourceid from resource_dependency_map where resourceid in (select resourceid from resource_dependency_map where dependencyresourceid=?) and dependencytype='PORTFOLIO';
configNameQuery=select distinct (configid),resourceid from healthcheck_details where resourceid=?;
componentsCount=select count(distinct(a.resourceid))as components from resource_dependency_map a,resource b where a.ResourceId = b.ResourceId and b.IsActive = 1 and a.portfolioid IN (:ids);
countOfChecksNew=select count(*) as checkcount from (select qd.clusterid ,qd.portfolioid ,qd.resourceid ,qd.observableid ,qd.value ,qd.observationtime ,qd.critical_status ,qd.warning_status ,qd.healthy_status from ( SELECT rdm2.dependencyresourceid AS clusterid ,intermediate.portfolioid ,intermediate.resourceid ,intermediate.observableid ,intermediate.value ,intermediate.observationtime ,intermediate.rowrank ,intermediate.critical_status ,intermediate.warning_status ,intermediate.healthy_status FROM ( SELECT obs.portfolioid ,obs.resourceid ,obs.observableid ,obs.value ,obs.observationtime ,RANK() OVER (partition by obs.resourceid, obs.observableid ORDER BY obs.observationtime desc) as rowrank ,CASE WHEN obs.state = 'Critical' THEN 1 ELSE 0 END AS critical_status ,CASE WHEN obs.state = 'Warning' THEN 1 ELSE 0 END AS warning_status, CASE WHEN obs.state = 'Healthy' THEN 1 ELSE 0 END AS healthy_status FROM observations obs) intermediate INNER JOIN resource_dependency_map rdm2 ON intermediate.portfolioid = rdm2.resourceid WHERE rdm2.dependencytype = 'PORTFOLIO' ) qd where qd.rowrank = 1 ) t where t.portfolioid=?;
componentStateQueryNew=select resourceid,criticalcount,warncount,healthycount from (select t.resourceid, sum(t.critical_status) as criticalCount, sum(t.warning_status) as warncount,sum(t.healthy_status) as healthycount from(select qd.clusterid,qd.portfolioid,qd.resourceid,qd.observableid,qd.value,qd.observationtime,qd.critical_status,qd.warning_status,qd.healthy_status from (SELECT rdm2.dependencyresourceid AS clusterid, intermediate.portfolioid, intermediate.resourceid, intermediate.observableid, intermediate.value, intermediate.observationtime, intermediate.rowrank, intermediate.critical_status, intermediate.warning_status, intermediate.healthy_status  FROM  (SELECT 	obs.portfolioid, obs.resourceid, obs.observableid, obs.value, obs.observationtime, RANK() OVER (partition by obs.resourceid, obs.observableid ORDER BY obs.observationtime desc) as rowrank, CASE WHEN obs.state = 'Critical' THEN 1 ELSE 0 END AS critical_status,CASE WHEN obs.state = 'Warning' THEN 1 ELSE 0 END AS warning_status,CASE WHEN obs.state = 'Healthy' THEN 1 ELSE 0 END AS healthy_status  FROM 	observations obs ) intermediate INNER JOIN   resource_dependency_map rdm2   ON intermediate.portfolioid = rdm2.resourceid  WHERE rdm2.dependencytype = 'PORTFOLIO'	) qd where qd.rowrank = 1 ) t where t.portfolioid=?	group by t.resourceid ) fin;
newPortReportCompQuery=select resourceid,observableid,resourcetypeid,threshold,value,yettostart,critical,warn,healthy,observationtime,resourcetypename,observablename,resourcename from (select t.resourceid, t.observableid, t.resourcetypeid, t.threshold, t.value, t.yettostart, t.critical, t.warn,t.healthy, t.observationtime, rt.resourcetypename, ob.observablename, res.resourcename from (select 	qd.clusterid,qd.portfolioid,qd.resourceid,qd.observableid,qd.value,qd.observationtime,qd.critical_status as critical,qd.warning_status as warn,qd.healthy_status as healthy,qd.upperthreshold as threshold,qd.yettostart,qd.resourcetypeid from (SELECT rdm2.dependencyresourceid AS clusterid,intermediate.portfolioid,intermediate.resourceid,intermediate.observableid,intermediate.value,intermediate.observationtime,intermediate.rowrank,intermediate.critical_status,intermediate.warning_status,intermediate.healthy_status,intermediate.upperthreshold,intermediate.yettostart,intermediate.resourcetypeid  FROM (SELECT  obs.portfolioid, obs.resourceid, obs.observableid, obs.value, obs.observationtime, orm.upperthreshold, obs.resourcetypeid, RANK() OVER (partition by obs.resourceid, obs.observableid ORDER BY obs.observationtime desc) as rowrank, MAX(case when obs.value is null then 1 else 0 end) as yettostart, MAX(CASE WHEN obs.state = 'Critical' THEN 1 ELSE 0 END) AS critical_status, MAX(CASE WHEN obs.state = 'Warning' THEN 1 ELSE 0 END) AS warning_status ,MAX(CASE WHEN obs.state = 'Healthy' THEN 1 ELSE 0 END) AS healthy_status  FROM 	observations obs INNER JOIN	observable_resource_map orm on obs.resourceid = orm.resourceid and obs.observableid = orm.observableid	group by obs.portfolioid,obs.resourceid,obs.observableid,obs.value,obs.observationtime,orm.upperthreshold,obs.resourcetypeid) intermediate INNER JOIN resource_dependency_map rdm2 ON intermediate.portfolioid = rdm2.resourceid WHERE rdm2.dependencytype = 'PORTFOLIO') qd	where qd.rowrank = 1 ) t , resourcetype rt, observable ob , resource res	where t.resourcetypeid = rt.resourcetypeid and t.observableid = ob.observableid and t.resourceid = res.resourceid and t.portfolioid=?	group by t.resourceid, t.observableid, t.resourcetypeid, t.threshold, t.value, t.yettostart, t.critical, t.warn,t.healthy, t.observationtime ,  rt.resourcetypename, ob.observablename, res.resourcename) as fin order by resourceid;
observableNameQuery=select observablename,unitofmeasure from observable where observableid=?;
recentComponentsQuery=select qd.clusterid ,qd.portfolioid ,qd.resourceid ,qd.observableid ,qd.value ,qd.observationtime ,qd.critical_status ,qd.warning_status ,qd.healthy_status from ( SELECT rdm2.dependencyresourceid AS clusterid ,intermediate.portfolioid ,intermediate.resourceid ,intermediate.observableid ,intermediate.value ,intermediate.observationtime ,intermediate.rowrank ,intermediate.critical_status ,intermediate.warning_status ,intermediate.healthy_status FROM ( SELECT obs.portfolioid ,obs.resourceid ,obs.observableid ,obs.value ,obs.observationtime ,RANK() OVER (partition by obs.resourceid, obs.observableid ORDER BY obs.observationtime desc) as rowrank ,MAX(CASE WHEN obs.state = 'Critical' THEN 1 ELSE 0 END) AS critical_status ,MAX(CASE WHEN obs.state = 'Warning' THEN 1 ELSE 0 END) AS warning_status ,MAX(CASE WHEN obs.state = 'Healthy' THEN 1 ELSE 0 END) AS healthy_status FROM observations obs group by obs.portfolioid,obs.resourceid ,obs.observableid ,obs.value ,obs.observationtime ) intermediate INNER JOIN resource_dependency_map rdm2 ON intermediate.portfolioid = rdm2.resourceid WHERE rdm2.dependencytype = 'PORTFOLIO' ) qd where qd.rowrank = 1 and qd.portfolioid=? and (qd.critical_status = 1 or qd.warning_status=1) order by qd.clusterid ,qd.portfolioid ,qd.resourceid ,qd.observableid
resourceTypeQuery=select distinct resourcetypename from resourcetype;
resourceHistoryDetailsQuery=select obs.resourceid, obs.observableid,obs.observablename,(select min(observationtime) from observations) as starttime,(select max(observationtime)  from observations) as endtime , o.unitofmeasure from observations obs inner join observable_resource_map orm on obs.resourceid=orm.resourceid and obs.observableid=orm.observableid inner join observable o on obs.observableid=o.observableid where obs.resourceid= :resId and obs.observableid= :obsId group by obs.resourceid,obs.observableid,obs.observablename,o.unitofmeasure;
resourceFilterValuesQuery=select obs.value, orm.lowerthreshold, orm.upperthreshold, obs.observablename, obs.observationtime from observations obs inner join observable_resource_map orm on obs.resourceid=orm.resourceid and obs.observableid=orm.observableid where obs.resourceid=? and obs.observableid=? and obs.observationtime between ? and ? order by obs.observationtime;
resourceActualValuesQuery=select obs.value, orm.lowerthreshold, orm.upperthreshold, obs.observablename, obs.observationtime from observations obs inner join observable_resource_map orm on obs.resourceid=orm.resourceid and obs.observableid=orm.observableid where obs.resourceid=? and obs.observableid=? order by obs.observationtime;
ticketCountQuery=select sum(case when autoresolutionattempted=1 then 1 end) as automationcount, sum(case when autoresolutionattempted=0 then 1 end) as manualcount, count(*) as totalCount from tickets;
errorCountQuery=select count(*) as errorCount from errors;
resourceTypeNameQuery=select resourcetypename from resourcetype where resourcetypeid=?;
resourceTypeIdQuery=select resourcetypeid from resourcetype where resourcetypename=?;
remediationActionQueryOld=select remediationplanid, remediationplanname,createdate,isuserdefined,status,runby,rundatetime,runduration from (select row_number() over(partition by rp.remediationplanid order by rp.remediationplanid asc) sl_no, rp.remediationplanid,rp.remediationplanname,rp.createdate,rp.isuserdefined, case when rprs.status is null or rprs.status = '' then 'NA' else rprs.status end as status, case when rprs.runby is null or rprs.runby = '' then 'NA' else rprs.runby end as runby, case when rprs.rundatetime is null then CURRENT_DATE else rprs.rundatetime end as rundatetime, case when rprs.runduration is null then '00:00:00' else rprs.runduration end as runduration from remediation_plan rp left outer join remediation_plan_run_statistics rprs on rp.remediationplanid = rprs.remediationplanid where rp.remediationplanid in (select remediationplanid from resourcetype_observable_remediation_plan_map where resourcetypeid=?))a where sl_no=1;
remediationActionQuery=select v2.remediationplanid,  v2.remediationplanname, v2.createdate, v2.isuserdefined, v2.status, v2.runby, v2.rundatetime, v2.runduration from (select row_number() over(partition by v1.remediationplanid order by v1.rundatetime desc) as sl_no, v1.remediationplanid, v1.remediationplanname, v1.createdate, v1.isuserdefined, v1.status, v1.runby, v1.rundatetime, case when v1.runduration is null then '00:00:00' else v1.runduration end as runduration from (select row_number() over(partition by rp.remediationplanid order by rp.remediationplanid asc) sl_no, rp.remediationplanid, rp.remediationplanname, rp.createdate, rp.isuserdefined, case when rpe.status is null or rpe.status = '' then 'NA' else rpe.status end as status, case when rpe.executedby is null or rpe.executedby = '' then 'NA' else rpe.executedby end as runby, case when rpe.executionstartdatetime is null then rp.createdate else rpe.executionstartdatetime end as rundatetime, EXTRACT(EPOCH FROM (rpe.executionenddatetime - rpe.executionstartdatetime)) * interval '1 sec' as runduration from 	remediation_plan rp left outer join 	remediation_plan_executions rpe on rp.remediationplanid = rpe.remediationplanid where rp.remediationplanid in 	(select remediationplanid from resourcetype_observable_remediation_plan_map where resourcetypeid=? and observableid=?)) v1) v2 where v2.sl_no=1 order by v2.rundatetime desc
actionStageQuery=select actionstageid,actionstagename from actionstages;
remediationPlanQuery=select COALESCE(array_to_json(array_agg(row_to_json(o))),'[]') outputjson from ( select remediationplanid, remediationplanname, isuserdefined, platformname, ( select COALESCE(array_to_json(array_agg(row_to_json(a1))),'[]') from ( select rpam.remediationplanactionid, rpam.actionid, a.actionname, a.actiondetails, rpam.actionstageid, astg.actionstagename, rpam.actionsequence, ( select COALESCE(array_to_json(array_agg(row_to_json(p))),'[]') from ( select rpapm.remediationplanactionid, ap.paramid, ap.name, ap.ismandatory, ap.defaultvalue, rpapm.providedvalue, (case when rpapm.providedvaluetype='fieldname' then true else false end) isfield from remdiation_plan_action_param_map rpapm inner join remediation_plan_action_map rpamm on rpapm.remediationplanactionid = rpamm.remediationplanactionid inner join action_params ap on rpamm.actionid = ap.actionid and rpapm.paramid = ap.paramid where rpapm.remediationplanactionid = rpam.remediationplanactionid ) p ) parameters from remediation_plan_action_map rpam inner join action a on rpam.actionid = a.actionid inner join actionstages astg on rpam.actionstageid = astg.actionstageid where rpam.remediationplanid = rp.remediationplanid and astg.category = 'remediation' order by rpam.actionsequence ) a1 ) actions from remediation_plan rp where rp.remediationplanid=? ) o;
remediationTestQuery=select array_to_json(array_agg(row_to_json(q))) as test_data FROM 	(select p.remediationplanid, p.remediationplanname, 		(select array_to_json(array_agg(row_to_json(b))) as actions from 		(select actionsequence, actionstageid, actionid, remediationplanactionid, (select array_to_json(array_agg(row_to_json(s))) as params FROM 			(select r.paramid,r.mappedfieldname, r.providedvalue, r.value from 				(select rpapm.paramid, rpapm.mappedfieldname, rpapm.providedvalue, 'value' as value 				from remdiation_plan_action_param_map rpapm inner join remediation_plan_action_map rpam 				on rpapm.remediationplanactionid=rpam.remediationplanactionid 				group by rpapm.paramid, rpapm.mappedfieldname, rpapm.providedvalue) r 			)s 		) FROM 			(select actionsequence, actionstageid, actionid, remediationplanactionid 			from remediation_plan_action_map rpam inner join remediation_plan rp 			ON rpam.remediationplanid=rp.remediationplanid 			and rp.remediationplanid=? 			group by actionsequence, actionstageid, actionid, remediationplanactionid) a) b) 		 from 	(select rpam.remediationplanactionid, rp.remediationplanname, rp.remediationplanid 	from remediation_plan rp inner join remediation_plan_action_map rpam 	on rp.remediationplanid = rpam.remediationplanid 	where rp.remediationplanid=?) p) q ;
remediationActionsQuery=select COALESCE(array_to_json(array_agg(row_to_json(o))),'[]') outputjson from ( select actionid, actionname, ( select COALESCE(array_to_json(array_agg(row_to_json(a1))),'[]') from ( select paramid, name, ismandatory, defaultvalue, false as isfield from action act inner join action_params ap on act.actionid = ap.actionid where ap.actionid = a.actionid ) a1 ) params from action a )o
remdiationPlanLastQuery=select remediationplanid from remediation_plan order by remediationplanid desc limit 1;
remediationPlanActionMapLastQuery=select remediationplanactionid from remediation_plan_action_map order by remediationplanactionid desc limit 1;
remediationPlanStatusQueryOld=select row_to_json(a1) as rpstatus from( 	select remediationplanstatid, remediationplanid, status, completion from remediation_plan_run_statistics where remediationplanstatid=? )a1 group by a1.*;
remediationPlanStatusQuery=select remediationplanexecid, remediationplanid, status from remediation_plan_executions where isnotified=false and status in ('SUCCESS','FAILED') and modifiedby=?;
remediationPlanStatIdQuery=select remediationplanstatid from remediation_plan_run_statistics where remediationplanid=? order by createdate desc limit 1;
fetchAllPlatformsQuery=select p.platformid, p.platformname from platforms p;
fetchAllExpertsQuery=select expertid, expertname, expertchatid from experts where expertid in (select expertid from expertise_details where resourcetypeid=? and observableid=?);
remediationplandetailsQuery=select remediationplanexecid,plandetails from remediation_plan_executions where remediationplanid=? order by remediationplanexecid desc limit 1
remediationplanRetrieveQuery=select remediationplanid, nodedetails from remediation_plan_executions where status='QUEUED' and remediationplanexecid=?;
actionQuery=select count(actionid) as total from action where actionname=?;
historyQuery=select array_to_json(array_agg(row_to_json(a))) as historydetails from ( select v1.remediationplanexecid, v1.remediationplanname, v1.createdate, v1.isuserdefined, v1.status, v1.runby, to_char(v1.rundatetime,'dd/mm/yyyy HH24:MI:SS') as rundatetime, case when v1.runduration is null then '00:00:00' else v1.runduration end as runduration, to_char(v1.executionstartdatetime,'dd/mm/yyyy HH24:MI:SS') as executionstartdatetime, to_char(v1.executionenddatetime,'dd/mm/yyyy HH24:MI:SS') as executionenddatetime, v1.observablename, v1.resourcetypeid, v1.resourcename from ( select row_number() over(partition by rpe.remediationplanexecid order by rpe.executionstartdatetime desc) sl_no, rpe.remediationplanexecid, rp.remediationplanname, rp.createdate, rp.isuserdefined, case when rpe.status is null or rpe.status = '' then 'NA' else rpe.status end as status, case when rpe.executedby is null or rpe.executedby = '' then 'NA' else rpe.executedby end as runby, case when rpe.executionstartdatetime is null then rp.createdate else rpe.executionstartdatetime end as rundatetime, EXTRACT(EPOCH FROM (rpe.executionenddatetime - rpe.executionstartdatetime)) * interval '1 sec' as runduration, rpe.executionstartdatetime, rpe.executionenddatetime, obs.observablename, res.resourcetypeid, res.resourcename from remediation_plan rp inner join remediation_plan_executions rpe on rp.remediationplanid = rpe.remediationplanid left outer join observable obs on rpe.observableid = obs.observableid left outer join resource res on rpe.resourceid = res.resourceid where rp.remediationplanid in ( select remediationplanid from resourcetype_observable_remediation_plan_map where resourcetypeid=?)) v1 where v1.sl_no=1 and v1.createdate > ? order by v1.executionenddatetime desc) a
historyLimitQuery=select array_to_json(array_agg(row_to_json(a))) as historydetails from ( select v1.remediationplanexecid, v1.remediationplanname, v1.createdate, v1.isuserdefined, v1.status, v1.runby, to_char(v1.rundatetime,'dd/mm/yyyy HH24:MI:SS') as rundatetime, case when v1.runduration is null then '00:00:00' else v1.runduration end as runduration, to_char(v1.executionstartdatetime,'dd/mm/yyyy HH24:MI:SS') as executionstartdatetime, to_char(v1.executionenddatetime,'dd/mm/yyyy HH24:MI:SS') as executionenddatetime, v1.observablename, v1.resourcetypeid, v1.resourcename from ( select row_number() over(partition by rpe.remediationplanexecid order by rpe.executionstartdatetime desc) sl_no, rpe.remediationplanexecid, rp.remediationplanname, rp.createdate, rp.isuserdefined, case when rpe.status is null or rpe.status = '' then 'NA' else rpe.status end as status, case when rpe.executedby is null or rpe.executedby = '' then 'NA' else rpe.executedby end as runby, case when rpe.executionstartdatetime is null then rp.createdate else rpe.executionstartdatetime end as rundatetime, EXTRACT(EPOCH FROM (rpe.executionenddatetime - rpe.executionstartdatetime)) * interval '1 sec' as runduration, rpe.executionstartdatetime, rpe.executionenddatetime, obs.observablename, res.resourcetypeid, res.resourcename from remediation_plan rp inner join remediation_plan_executions rpe on rp.remediationplanid = rpe.remediationplanid left outer join observable obs on rpe.observableid = obs.observableid left outer join resource res on rpe.resourceid = res.resourceid where rp.remediationplanid in ( select remediationplanid from resourcetype_observable_remediation_plan_map where resourcetypeid=?)) v1 where v1.sl_no=1 and v1.createdate > ? limit ? order by v1.executionenddatetime desc) a
remediationPlanActionMapQuery=select remediationplanactionid from remediation_plan_action_map where remediationplanid=?;
remediaitonPlanActionHistoryQuery=select rpe.remediationplanexecid, rpea.remediationplanactionid, rpea.status, rpea.logdata, rpea.output, act.actionname from remediation_plan_executions rpe inner join remediation_plan_execution_actions rpea on rpe.remediationplanexecid = rpea.remediationplanexecid inner join remediation_plan_action_map rpam on rpea.remediationplanactionid = rpam.remediationplanactionid inner join action act on rpam.actionid = act.actionid where rpe.remediationplanexecid=? order by rpea.remediationplanactionid; 
remediationPlanExecidQuery=select v1.remediationplanexecid from (select remediationplanexecid,remediationplanid, executionstartdatetime,status, row_number()over (order by executionstartdatetime desc) as rn from remediation_plan_executions) v1 where v1.remediationplanid=? and v1.status = 'FAILED' and v1.rn=1;
remediationPlanExecActionidQuery=select remediationplanexecactionid from remediation_plan_execution_actions where remediationplanexecid=? and status = 'FAILED' order by remediationplanactionid;
remediationPlanwithexecidQuery=select COALESCE(array_to_json(array_agg(row_to_json(o))),'[]') output from ( select rp.remediationplanid, rp.remediationplanname, rp.isuserdefined, rp.platformname, rpe.nodedetails, ( select COALESCE(array_to_json(array_agg(row_to_json(a1))),'[]') from ( select rpam.remediationplanactionid, rpam.actionid, a.actionname, rpam.actionstageid, astg.actionstagename, rpam.actionsequence, ( select COALESCE(array_to_json(array_agg(row_to_json(p))),'[]') from ( select rpapm.remediationplanactionid, ap.paramid, ap.name, ap.ismandatory, ap.defaultvalue, rpapm.providedvalue, (case when rpapm.providedvaluetype='fieldname' then true else false end) isfield from remdiation_plan_action_param_map rpapm inner join remediation_plan_action_map rpamm on rpapm.remediationplanactionid = rpamm.remediationplanactionid inner join action_params ap on rpamm.actionid = ap.actionid and rpapm.paramid = ap.paramid where rpapm.remediationplanactionid = rpam.remediationplanactionid ) p ) parameters from remediation_plan_action_map rpam inner join action a on rpam.actionid = a.actionid inner join actionstages astg on rpam.actionstageid = astg.actionstageid where rpam.remediationplanid = rp.remediationplanid and astg.category = 'remediation' order by rpam.actionsequence ) a1 ) actions from remediation_plan rp inner join remediation_plan_executions rpe on rp.remediationplanid = rpe.remediationplanid where rpe.remediationplanexecid=?) o;
actionIdQuery=select actionid from action where actionname=?;
executionModeQuery=select executionmode from platforms where platformname=?;
remediationPlanActionidQuery=select remediationplanactionid from remediation_plan_execution_actions where remediationplanexecid=? and status = 'QUEUED' order by remediationplanactionid;
parametersQuery=select row_to_json(a) as paramdetails from ( select v2.actionname, ap.name,v2.actiondetails,v2.providedvalue as defaultvalue from (select act.actiondetails, act.actionname, v1.actionid, v1.providedvalue,v1.paramid from (select rpam.actionid, rpam.remediationplanactionid, rpapm.providedvalue, rpapm.paramid from remediation_plan_action_map rpam inner join remdiation_plan_action_param_map rpapm on rpam.remediationplanactionid = rpapm.remediationplanactionid where rpam.remediationplanactionid=?) v1 inner join action act on act.actionid = v1.actionid) v2 inner join action_params ap on ap.actionid = v2.actionid and ap.paramid=v2.paramid)a
remediationPlanExecQuery = select remediationplanexecid from remediation_plan_executions where status = 'QUEUED' and ispicked = 'FALSE' limit 1;
obsResourceIdQuery=select resourceid, source, resourcetypeid from resource where resourcename=?
obsObservableIdQuery=select observableid from observable where observablename=?
obsAliasNameQuery=select aliasname from resourcetype_observable_action_map where resourcetypeid=? and observableid=?
obsPortfolioIdQuery=select portfolioid from resource_dependency_map where resourceid=?
obsConfigIdQuery=select configid from healthcheck_details where resourceid=? and aliasname=?
remediationPlanExecIdQuery=select remediationplanexecid from remediation_plan_execution_actions where correlationid=?
remediationPlanNameQuery=select remediationplanname from remediation_plan where remediationplanid=?